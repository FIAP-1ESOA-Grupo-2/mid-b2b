// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection

  //provider = "mysql" // sqlite | mysql
  //url      = env("DATABASE_URL") // file:./dev.db | env("DATABASE_URL")

  //provider = "sqlite"
  //url      = "file:./dev.db"
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  cpf           String         @unique
  phoneNumber   String?
  email         String         @unique
  password      String         @db.Text
  sector        String?
  role          String?
  accountType   String
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  interests     UserInterest[]
  UserProvider  UserProvider[]
  UserSetting   UserSetting[]

  @@map("users")
}

model UserProvider {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  provider_id String?
  provider    String

  @@map("users_providers")
}

model UserSetting {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  setting String
  value   String

  @@map("users_settings")
}

model Interest {
  id           Int            @id @default(autoincrement())
  title        String
  createdAt    DateTime       @default(now())
  InterestUser UserInterest[]

  @@map("interests")
}

model UserInterest {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId Int

  @@map("users_interests")
}

model EmailVerification {
  email String @unique
  token String

  @@map("email_verification_tokens")
}

model PasswordReset {
  email String @unique
  token String

  @@map("password_reset_tokens")
}
